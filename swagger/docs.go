// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Github Issues",
            "url": "https://github.com/jinyaoMa/gin-systray-starter/issues"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/jinyaoMa/gin-systray-starter/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Before Authorization"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account",
                        "name": "account",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ ok , data , token }"
                    },
                    "404": {
                        "description": "{ error }"
                    }
                }
            }
        },
        "/stores/list": {
            "get": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Get Stores List",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Before Authorization"
                ],
                "summary": "GetStoresList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ ok , data }"
                    },
                    "404": {
                        "description": "{ error }"
                    }
                }
            }
        },
        "/timesheet/download": {
            "get": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Download Excel",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "After Authorization"
                ],
                "summary": "DownloadExcel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Is All",
                        "name": "all",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ".xlsx file"
                    },
                    "401": {
                        "description": "Auth failed"
                    },
                    "404": {
                        "description": "{ error }"
                    }
                }
            }
        },
        "/timesheet/list": {
            "get": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Get Timesheet List",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "After Authorization"
                ],
                "summary": "GetTimesheetList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Show Date",
                        "name": "showDate",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy",
                        "name": "orderby",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ ok , data , count }"
                    },
                    "401": {
                        "description": "Auth failed"
                    },
                    "404": {
                        "description": "{ error }"
                    }
                }
            }
        },
        "/timesheet/update/": {
            "post": {
                "security": [
                    {
                        "BearerIdAuth": []
                    }
                ],
                "description": "Update Timesheet",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "After Authorization"
                ],
                "summary": "UpdateTimesheet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization",
                        "name": "Authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "StoreID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "ID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Total",
                        "name": "Total",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{ ok }"
                    },
                    "401": {
                        "description": "Auth failed"
                    },
                    "404": {
                        "description": "{ error }"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerIdAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "gin-systray-starter",
	Description: "\"Starter code for Go application with Gin, System Tray, Gorm, Air, Swagger\"",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
